{"remainingRequest":"/Users/qingfeng/my-vuepress/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/qingfeng/my-vuepress/node_modules/vuepress-theme-reform/util/imageScale.js","dependencies":[{"path":"/Users/qingfeng/my-vuepress/node_modules/vuepress-theme-reform/util/imageScale.js","mtime":499162500000},{"path":"/Users/qingfeng/my-vuepress/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qingfeng/my-vuepress/node_modules/babel-loader/lib/index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}
{"remainingRequest":"/Users/qingfeng/my-vuepress/node_modules/babel-loader/lib/index.js??ref--3-1!/Users/qingfeng/my-vuepress/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/qingfeng/my-vuepress/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/qingfeng/my-vuepress/node_modules/vuepress-theme-reform/components/Page.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/qingfeng/my-vuepress/node_modules/vuepress-theme-reform/components/Page.vue","mtime":499162500000},{"path":"/Users/qingfeng/my-vuepress/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qingfeng/my-vuepress/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/qingfeng/my-vuepress/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/qingfeng/my-vuepress/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9xaW5nZmVuZy9teS12dWVwcmVzcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciI7CmltcG9ydCBfb2JqZWN0U3ByZWFkIGZyb20gIi9Vc2Vycy9xaW5nZmVuZy9teS12dWVwcmVzcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0U3ByZWFkMiI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnJlZ2V4cC5leGVjLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnJlcGxhY2UuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwppbXBvcnQgeyByZXNvbHZlUGFnZSwgb3V0Ym91bmRSRSwgZW5kaW5nU2xhc2hSRSB9IGZyb20gIkBwYXJlbnQtdGhlbWUvdXRpbCI7CmltcG9ydCBHaXRhbGsgZnJvbSAiZ2l0YWxrIjsKaW1wb3J0IGltYWdlc1pvb20gZnJvbSAiQHRoZW1lL3V0aWwvaW1hZ2VTY2FsZSI7CmltcG9ydCAiZ2l0YWxrL2Rpc3QvZ2l0YWxrLmNzcyI7CmV4cG9ydCBkZWZhdWx0IHsKICBwcm9wczogWyJzaWRlYmFySXRlbXMiXSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcGF0aDogIiIKICAgIH07CiAgfSwKICBjb21wdXRlZDogewogICAgbGFzdFVwZGF0ZWQ6IGZ1bmN0aW9uIGxhc3RVcGRhdGVkKCkgewogICAgICByZXR1cm4gdGhpcy4kcGFnZS5sYXN0VXBkYXRlZDsKICAgIH0sCiAgICB0YWdzOiBmdW5jdGlvbiB0YWdzKCkgewogICAgICByZXR1cm4gdGhpcy4kcGFnZS5mcm9udG1hdHRlci50YWdzOwogICAgfSwKICAgIGxhc3RVcGRhdGVkVGV4dDogZnVuY3Rpb24gbGFzdFVwZGF0ZWRUZXh0KCkgewogICAgICBpZiAodHlwZW9mIHRoaXMuJHRoZW1lTG9jYWxlQ29uZmlnLmxhc3RVcGRhdGVkID09PSAic3RyaW5nIikgewogICAgICAgIHJldHVybiB0aGlzLiR0aGVtZUxvY2FsZUNvbmZpZy5sYXN0VXBkYXRlZDsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiB0aGlzLiRzaXRlLnRoZW1lQ29uZmlnLmxhc3RVcGRhdGVkID09PSAic3RyaW5nIikgewogICAgICAgIHJldHVybiB0aGlzLiRzaXRlLnRoZW1lQ29uZmlnLmxhc3RVcGRhdGVkOwogICAgICB9CgogICAgICByZXR1cm4gIkxhc3QgVXBkYXRlZCI7CiAgICB9LAogICAgcHJldjogZnVuY3Rpb24gcHJldigpIHsKICAgICAgdmFyIHByZXYgPSB0aGlzLiRwYWdlLmZyb250bWF0dGVyLnByZXY7CgogICAgICBpZiAocHJldiA9PT0gZmFsc2UpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSBpZiAocHJldikgewogICAgICAgIHJldHVybiByZXNvbHZlUGFnZSh0aGlzLiRzaXRlLnBhZ2VzLCBwcmV2LCB0aGlzLiRyb3V0ZS5wYXRoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gcmVzb2x2ZVByZXYodGhpcy4kcGFnZSwgdGhpcy5zaWRlYmFySXRlbXMpOwogICAgICB9CiAgICB9LAogICAgbmV4dDogZnVuY3Rpb24gbmV4dCgpIHsKICAgICAgdmFyIG5leHQgPSB0aGlzLiRwYWdlLmZyb250bWF0dGVyLm5leHQ7CgogICAgICBpZiAobmV4dCA9PT0gZmFsc2UpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0gZWxzZSBpZiAobmV4dCkgewogICAgICAgIHJldHVybiByZXNvbHZlUGFnZSh0aGlzLiRzaXRlLnBhZ2VzLCBuZXh0LCB0aGlzLiRyb3V0ZS5wYXRoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gcmVzb2x2ZU5leHQodGhpcy4kcGFnZSwgdGhpcy5zaWRlYmFySXRlbXMpOwogICAgICB9CiAgICB9LAogICAgZWRpdExpbms6IGZ1bmN0aW9uIGVkaXRMaW5rKCkgewogICAgICBpZiAodGhpcy4kcGFnZS5mcm9udG1hdHRlci5lZGl0TGluayA9PT0gZmFsc2UpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KCiAgICAgIHZhciBfdGhpcyQkc2l0ZSR0aGVtZUNvbmYgPSB0aGlzLiRzaXRlLnRoZW1lQ29uZmlnLAogICAgICAgICAgcmVwbyA9IF90aGlzJCRzaXRlJHRoZW1lQ29uZi5yZXBvLAogICAgICAgICAgZWRpdExpbmtzID0gX3RoaXMkJHNpdGUkdGhlbWVDb25mLmVkaXRMaW5rcywKICAgICAgICAgIF90aGlzJCRzaXRlJHRoZW1lQ29uZjIgPSBfdGhpcyQkc2l0ZSR0aGVtZUNvbmYuZG9jc0RpciwKICAgICAgICAgIGRvY3NEaXIgPSBfdGhpcyQkc2l0ZSR0aGVtZUNvbmYyID09PSB2b2lkIDAgPyAiIiA6IF90aGlzJCRzaXRlJHRoZW1lQ29uZjIsCiAgICAgICAgICBfdGhpcyQkc2l0ZSR0aGVtZUNvbmYzID0gX3RoaXMkJHNpdGUkdGhlbWVDb25mLmRvY3NCcmFuY2gsCiAgICAgICAgICBkb2NzQnJhbmNoID0gX3RoaXMkJHNpdGUkdGhlbWVDb25mMyA9PT0gdm9pZCAwID8gIm1hc3RlciIgOiBfdGhpcyQkc2l0ZSR0aGVtZUNvbmYzLAogICAgICAgICAgX3RoaXMkJHNpdGUkdGhlbWVDb25mNCA9IF90aGlzJCRzaXRlJHRoZW1lQ29uZi5kb2NzUmVwbywKICAgICAgICAgIGRvY3NSZXBvID0gX3RoaXMkJHNpdGUkdGhlbWVDb25mNCA9PT0gdm9pZCAwID8gcmVwbyA6IF90aGlzJCRzaXRlJHRoZW1lQ29uZjQ7CgogICAgICBpZiAoZG9jc1JlcG8gJiYgZWRpdExpbmtzICYmIHRoaXMuJHBhZ2UucmVsYXRpdmVQYXRoKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlRWRpdExpbmsocmVwbywgZG9jc1JlcG8sIGRvY3NEaXIsIGRvY3NCcmFuY2gsIHRoaXMuJHBhZ2UucmVsYXRpdmVQYXRoKTsKICAgICAgfQogICAgfSwKICAgIGVkaXRMaW5rVGV4dDogZnVuY3Rpb24gZWRpdExpbmtUZXh0KCkgewogICAgICByZXR1cm4gdGhpcy4kdGhlbWVMb2NhbGVDb25maWcuZWRpdExpbmtUZXh0IHx8IHRoaXMuJHNpdGUudGhlbWVDb25maWcuZWRpdExpbmtUZXh0IHx8ICJFZGl0IHRoaXMgcGFnZSI7CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBjcmVhdGVFZGl0TGluazogZnVuY3Rpb24gY3JlYXRlRWRpdExpbmsocmVwbywgZG9jc1JlcG8sIGRvY3NEaXIsIGRvY3NCcmFuY2gsIHBhdGgpIHsKICAgICAgdmFyIGJpdGJ1Y2tldCA9IC9iaXRidWNrZXQub3JnLzsKCiAgICAgIGlmIChiaXRidWNrZXQudGVzdChyZXBvKSkgewogICAgICAgIHZhciBfYmFzZSA9IG91dGJvdW5kUkUudGVzdChkb2NzUmVwbykgPyBkb2NzUmVwbyA6IHJlcG87CgogICAgICAgIHJldHVybiBfYmFzZS5yZXBsYWNlKGVuZGluZ1NsYXNoUkUsICIiKSArICIvc3JjIiArICIvIi5jb25jYXQoZG9jc0JyYW5jaCwgIi8iKSArIChkb2NzRGlyID8gZG9jc0Rpci5yZXBsYWNlKGVuZGluZ1NsYXNoUkUsICIiKSArICIvIiA6ICIiKSArIHBhdGggKyAiP21vZGU9ZWRpdCZzcGE9MCZhdD0iLmNvbmNhdChkb2NzQnJhbmNoLCAiJmZpbGV2aWV3ZXI9ZmlsZS12aWV3LWRlZmF1bHQiKTsKICAgICAgfQoKICAgICAgdmFyIGJhc2UgPSBvdXRib3VuZFJFLnRlc3QoZG9jc1JlcG8pID8gZG9jc1JlcG8gOiAiaHR0cHM6Ly9naXRodWIuY29tLyIuY29uY2F0KGRvY3NSZXBvKTsKICAgICAgcmV0dXJuIGJhc2UucmVwbGFjZShlbmRpbmdTbGFzaFJFLCAiIikgKyAiL2VkaXQiICsgIi8iLmNvbmNhdChkb2NzQnJhbmNoLCAiLyIpICsgKGRvY3NEaXIgPyBkb2NzRGlyLnJlcGxhY2UoZW5kaW5nU2xhc2hSRSwgIiIpICsgIi8iIDogIiIpICsgcGF0aDsKICAgIH0sCiAgICBpbml0R2l0YWxrOiBmdW5jdGlvbiBpbml0R2l0YWxrKCkgewogICAgICB2YXIgZnJvbnRtYXR0ZXIgPSB0aGlzLiRwYWdlLmZyb250bWF0dGVyOwogICAgICB2YXIgcGF0aCA9IHRoaXMuJHJvdXRlLnBhdGg7CgogICAgICBpZiAocGF0aCAhPT0gdGhpcy5wYXRoICYmIGZyb250bWF0dGVyLmdpdFRhbGsgIT0gZmFsc2UpIHsKICAgICAgICB0aGlzLmluaXRJbWdab29tKCk7CiAgICAgICAgdGhpcy5wYXRoID0gcGF0aDsKICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJnaXRhbGstY29udGFpbmVyIik7CiAgICAgICAgaWYgKGEgJiYgYS5jaGlsZHJlbi5sZW5ndGggPiAwKSBhLmlubmVySFRNTCA9ICIiOwogICAgICAgIHZhciBnaXRUYWxrUGFyYW1zID0gdGhpcy4kc2l0ZS50aGVtZUNvbmZpZy5naXRhbGs7CgogICAgICAgIGlmIChHaXRhbGsgJiYgZ2l0VGFsa1BhcmFtcykgewogICAgICAgICAgdmFyIGxhYmVsUnVsZSA9IGV2YWwoZ2l0VGFsa1BhcmFtcy5sYWJlbFJ1bGUpOwogICAgICAgICAgdmFyIGlkID0gbGFiZWxSdWxlKHRoaXMuJHBhZ2UudGl0bGUsIHRoaXMuJHBhZ2UucGF0aCk7CiAgICAgICAgICB2YXIgZ2l0YWxrID0gbmV3IEdpdGFsayhfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGdpdFRhbGtQYXJhbXMpLCB7fSwgewogICAgICAgICAgICBpZDogaWQgfHwgdGhpcy4kcGFnZS50aXRsZQogICAgICAgICAgfSkpOwogICAgICAgICAgZ2l0YWxrLnJlbmRlcigiZ2l0YWxrLWNvbnRhaW5lciIpOwogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIGluaXRJbWdab29tOiBmdW5jdGlvbiBpbml0SW1nWm9vbSgpIHsKICAgICAgdmFyIGltZ0RvbSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCJpbWciKTsKCiAgICAgIHZhciBfaXRlcmF0b3IgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihpbWdEb20pLAogICAgICAgICAgX3N0ZXA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgdiA9IF9zdGVwLnZhbHVlOwogICAgICAgICAgdi5zdHlsZSA9IHYuZ2V0QXR0cmlidXRlKCJzdHlsZSIpICsgIlxuICAgICAgICAgIGN1cnNvcjogem9vbS1pbjtcbiAgICAgICAgIjsKICAgICAgICAgIHYuYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICB2YXIgZG9tID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7CiAgICAgICAgICAgIGRvbS5zdHlsZSA9ICJcbiAgICAgICAgICAgIHBvc2l0aW9uOmZpeGVkO1xuICAgICAgICAgICAgdG9wOiAwO1xuICAgICAgICAgICAgbGVmdDogMDtcbiAgICAgICAgICAgIHotaW5kZXg6IDk5OTtcbiAgICAgICAgICAgIHdpZHRoOjEwMCU7XG4gICAgICAgICAgICBoZWlnaHQ6MTAwJTtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6cmdiYSg0NiwgNDYsIDQ2LCAwLjc5KTtcbiAgICAgICAgICAgIGRpc3BsYXk6ZmxleDtcbiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDpjZW50ZXI7XG4gICAgICAgICAgICBhbGlnbi1pdGVtczpjZW50ZXI7XG4gICAgICAgICAgICBjdXJzb3I6IHpvb20tb3V0O1xuICAgICAgICAgICI7CiAgICAgICAgICAgIHZhciBpbWdEb20gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJpbWciKTsKICAgICAgICAgICAgaW1nRG9tLnNyYyA9IHRoaXMuc3JjOwogICAgICAgICAgICBpbWdEb20uc3R5bGUgPSAiXG4gICAgICAgICAgICB3aWR0aDo3MCU7XG4gICAgICAgICAgIjsKICAgICAgICAgICAgZG9tLmFwcGVuZChpbWdEb20pOwogICAgICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChkb20pOwoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICBpbWFnZXNab29tLmluaXQoewogICAgICAgICAgICAgICAgZWxlbTogaW1nRG9tLAogICAgICAgICAgICAgICAgcGFyZW50RG9tOiBkb20KICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBkb20uYWRkRXZlbnRMaXN0ZW5lcigiY2xpY2siLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChkb20pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgX2l0ZXJhdG9yLmUoZXJyKTsKICAgICAgfSBmaW5hbGx5IHsKICAgICAgICBfaXRlcmF0b3IuZigpOwogICAgICB9CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5pbml0R2l0YWxrKCk7CiAgfSwKICB1cGRhdGVkOiBmdW5jdGlvbiB1cGRhdGVkKCkgewogICAgdGhpcy5pbml0R2l0YWxrKCk7CiAgfQp9OwoKZnVuY3Rpb24gcmVzb2x2ZVByZXYocGFnZSwgaXRlbXMpIHsKICByZXR1cm4gZmluZChwYWdlLCBpdGVtcywgLTEpOwp9CgpmdW5jdGlvbiByZXNvbHZlTmV4dChwYWdlLCBpdGVtcykgewogIHJldHVybiBmaW5kKHBhZ2UsIGl0ZW1zLCAxKTsKfQoKZnVuY3Rpb24gZmluZChwYWdlLCBpdGVtcywgb2Zmc2V0KSB7CiAgdmFyIHJlcyA9IFtdOwogIGZsYXR0ZW4oaXRlbXMsIHJlcyk7CgogIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSsrKSB7CiAgICB2YXIgY3VyID0gcmVzW2ldOwoKICAgIGlmIChjdXIudHlwZSA9PT0gInBhZ2UiICYmIGN1ci5wYXRoID09PSBkZWNvZGVVUklDb21wb25lbnQocGFnZS5wYXRoKSkgewogICAgICByZXR1cm4gcmVzW2kgKyBvZmZzZXRdOwogICAgfQogIH0KfQoKZnVuY3Rpb24gZmxhdHRlbihpdGVtcywgcmVzKSB7CiAgZm9yICh2YXIgaSA9IDAsIGwgPSBpdGVtcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKICAgIGlmIChpdGVtc1tpXS50eXBlID09PSAiZ3JvdXAiKSB7CiAgICAgIGZsYXR0ZW4oaXRlbXNbaV0uY2hpbGRyZW4gfHwgW10sIHJlcyk7CiAgICB9IGVsc2UgewogICAgICByZXMucHVzaChpdGVtc1tpXSk7CiAgICB9CiAgfQp9"},null]}